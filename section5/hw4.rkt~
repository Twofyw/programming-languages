
#lang racket

(provide (all-defined-out)) ;; so we can put tests in a second file

;; put your code below
; Problem 1
; How to compress solution into  4 lines including function definition?
(define (sequence low high stride)
  (define (aux acc next)
    (if (<= next high)
        (aux (append acc (list next)) (+ next stride))
        acc))
  (aux null low))

; Problem 2
(define (string-append-map xs suffix)
  (map (lambda (x) (string-append x suffix)) xs))

; Problem 3
(define (list-nth-mod xs n)
  (cond [(< n 0) (error "list-nth-mod: negative number")]
        [(null? xs) (error "list-nth-mod: empty list")]
        [#t (list-ref xs (remainder n (length xs)))]))

; Problem 4
(define (stream-for-n-steps s n)
  